 -----
 Releasing A Maven Project
 -----
 Jason van Zyl
 -----
 9 December 2006
 -----

~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

Releasing A Maven Project

 What follows is a description of releasing a Maven project to a staging repository, whereupon it is scruntized by
 the community, approved, and transfered to a production repository. In order to release a project you must have the
 following setup in your <<<$HOME/.m2/settings.xml>>> which is a profile which provides settings for:

 * Your GPG passphrase which will be used to sign all artifacts that are released. If you have no idea what your
   GPG passphrase is then refer to {{{pmc-release-process.html}this document}}.

 * The staging repository that you want to deploy the release to.

 Here's what your <<<release>>> profile might look like in your <<<$HOME/.m2/settings.xml>>>:

+-----+
<settings>
  ...
  <profiles>
    <profile>
      <id>release</id>
      <properties>
        <gpg.passphrase>secretPhrase</gpg.passphrase>
        <deploy.altRepository>apache.releases::default::scp://hostname/path/to/directory/stage/repo</deploy.altRepository>
      </properties>
    </profile>
  </profiles>
  ...
</settings>
+-----+

 Everything that you need to release has been configured in the POM all Maven projects inherit from. The release plugin configuration
 being used is the following:

%{snippet|id=release-plugin-configuration|url=http://svn.apache.org/repos/asf/maven/pom/trunk/maven/pom.xml}

 And the profile being used for releases is the following:

%{snippet|id=release-profile|url=http://svn.apache.org/repos/asf/maven/pom/trunk/maven/pom.xml}

* The New Steps

 The following steps replace steps 2-7 in the
 {{{./pmc-release-process.html}old release process}}.

 [[1]] Prepare the release

+-----+
mvn release:prepare
+-----+

 [[2]] Perform the release

+-----+
mvn release:perform
+-----+

 <<IMPORTANT NOTE:>> Be sure that the generated artifacts should respect the
 {{{http://www.apache.org/dev/release.html}Apache release rules}}: NOTICE and LICENSE files should be present in
 META-INF directory within the jar. For -sources artifact, be sure that your pom does NOT use the
 maven-source-plugin:2.3 which is broken.

 [[3]] Propose a vote on the dev list with the closed issues, the issues left,
 the staging repository and the staging site. For instance:

+-----+
To: "Maven Developers List" <dev@maven.apache.org>
Subject: [VOTE] Release Maven XXX plugin version 2.1

Hi,

We solved N issues:
http://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=XXX&styleName=Html&version=XXX

There are still a couple of issues left in JIRA:
http://jira.codehaus.org/secure/IssueNavigator.jspa?reset=true&pid=XXX&status=1

Staging repo:
http://people.apache.org/~YOUR_APACHE_USERNAME/staging-repo/maven-XXX-plugin/

Staging site:
http://people.apache.org/~YOUR_APACHE_USERNAME/maven-XXX-plugin/

Vote open for 72 hours.

[ ] +1
[ ] +0
[ ] -1

+-----+

 Once a vote is successful, post the result to the dev list and cc the pmc.

 [[4]] Copy from the staging repo to the production repo

 Once the release is deemed fit for public consumption it can be transfered to a production repository where it will
 be available to all users.

 <<Note:>> For now the stage plugin hasn't been released yet and you need to build it yourself.
 The tests for the stage plugin requires that an scp server is present on your local machine. If you are trying to build
 the plugin on Windows you need to exlude the tests. You do this by adding <<<-Dmaven.test.skip=true>>> on the command
 line when you build it.

 Here is an example on how to use the stage plugin:

+-----+
mvn stage:copy -Dsource="http://people.apache.org/~carlos/staging-repo" \
               -Dtarget="scp://people.apache.org/www/people.apache.org/repo/m2-ibiblio-rsync-repository" \
               -Dversion=2.3 \
               -DtargetRepositoryId=apache.releases
+-----+

 <<Note:>> The <<<version>>> parameter is currently ignored and the <<entire>>
 staging repository is synced, not just the given version or the current
 project. It still needs to be provided, though.

 <<Releasing a Project Directly into a Production Repository>>

 If you want to release directly to a production repository then you simply configure the staging repository point at
 the production repository by using the following in your <<<$HOME/.m2/settings.xml>>>:

+-----+
<settings>
  ...
  <profiles>
    <profile>
      <id>release</id>
      <properties>
        <gpg.passphrase>secretPhrase</gpg.passphrase>
        <deploy.altRepository>apache.releases::default::scp://people.apache.org/www/people.apache.org/repo/m2-ibiblio-rsync-repository</deploy.altRepository>
      </properties>
    </profile>
  </profiles>
  ...
</settings>
+-----+

 This will allow you to bypass the staging phase and push the release directly into a production repository. It is assume that
 you have pushed a snapshot somewhere that people have looked at and approved of.

 [[5]] Deploy the project site

 []

 After that you can continue with step 8 in the
 {{{./pmc-release-process.html}old release process}}.

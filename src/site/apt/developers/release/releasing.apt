 -----
 Releasing A Maven Project
 -----
 Jason van Zyl
 -----
 03 December 2007
 -----

~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

Releasing A Maven Project

 What follows is a description of releasing a Maven project to a staging repository, whereupon it is scruntized by
 the community, approved, and transfered to a production repository.
 
 
Prerequisite

 Be sure that:
 
  * you have all Maven servers defined in your settings.xml. For more information, please refer to
  {{{../committer-settings.html}Committer settings}}.

  * you have created your GPG keys. For more information, please refer to {{{pmc-gpg-keys.html}Making GPG Keys}}.

 
 In order to release a project you must also have the
 following setup in your <<<$HOME/.m2/settings.xml>>> which is a profile that defines the staging repository.

 Here's what your <<<release>>> profile might look like in your <<<$HOME/.m2/settings.xml>>>:

+-----+
<settings>
  ...
  <profiles>
    <profile>
      <id>release</id>
      <properties>
        <gpg.passphrase>secretPhrase</gpg.passphrase>
        <deploy.altRepository>apache.releases::default::scp://hostname/path/to/directory/stage/repo</deploy.altRepository>
      </properties>
    </profile>
  </profiles>
  ...
</settings>
+-----+

 Everything that you need to release has been configured in the POM all Maven projects inherit from. The release plugin configuration
 being used is the following:

%{snippet|id=release-plugin-configuration|url=http://svn.apache.org/repos/asf/maven/pom/trunk/maven/pom.xml}

 And the profile being used for releases is the following:

%{snippet|id=release-profile|url=http://svn.apache.org/repos/asf/maven/pom/trunk/maven/pom.xml}

* Release Process for Part Of Maven

 [[1]] Prepare your poms for release:

   [[a]] Make sure there are <<NO>> snapshots in the poms to be released.

   [[b]] Check that your poms will not lose content when they are rewritten
         during the release process.

     * <<<mvn release:prepare -DdryRun=true>>>

     * Diff the original file <<<pom.xml>>> with the one called
       <<<pom.xml.tag>>> to see if the license or any other info has been
       removed. This has been known to happen if the starting
       <<<\<project\>>>> tag is <<not>> on a single line.

       The only things that should be different between these files are the
       <<<\<version\>>>> and <<<\<scm\>>>> elements. Any other changes, you
       must backport yourself to the original <<<pom.xml>>> file and commit
       before proceeding with the release.

     * Remember to do '<<<mvn release:clean>>>' before you start the real
       release process.

 [[2]] Publish a snapshot:

+-----+
>mvn deploy
...
[INFO] [deploy:deploy]
[INFO] Retrieving previous build number from apache.snapshots
...
+-----+

 <<IMPORTANT NOTE:>> Be sure that the generated artifacts respect the
 {{{http://www.apache.org/dev/release.html#distribute-raw-artifact}Apache release rules}}: NOTICE and LICENSE files should be present in
 the META-INF directory within the jar. For -sources artifacts, be sure that your pom does NOT use the
 maven-source-plugin:2.0.3 which is broken. The recommended version at this time is 2.0.4.

 <<Note>>: You could verify the deployment under Maven Snapshot repository on Apache.

+-----+
http://people.apache.org/repo/m2-snapshot-repository/org/apache/maven/plugins/maven-XXX-plugin/2.1/
+-----+

 [[3]] Prepare the release

+-----+
mvn release:prepare
+-----+

 <<Note>>: Preparing the release will create the new tag in SVN, automatically checking in on your behalf.

 [[4]] Stage the release for a vote

+-----+
mvn release:perform
+-----+

 [[4]] Stage the latest documentation

 <<Note>>: The plugin parent pom is configured to stage the documentation in a "versioned" directory
 such as <<</plugins/maven-XXX-plugin-Y.Z-SNAPSHOT>>>.

+------+
mvn site:stage-deploy -Preporting
+------+

 [[3]] Propose a vote on the dev list with the closed issues, the issues left,
 the staging repository and the staging site. For instance:

+-----+
To: "Maven Developers List" <dev@maven.apache.org>
Subject: [VOTE] Release Maven XXX plugin version 2.1

Hi,

We solved N issues:
http://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=XXX&styleName=Html&version=XXX

There are still a couple of issues left in JIRA:
http://jira.codehaus.org/secure/IssueNavigator.jspa?reset=true&pid=XXX&status=1

Staging repo:
http://people.apache.org/~YOUR_APACHE_USERNAME/staging-repo/maven-XXX-plugin/

Staging site:
http://maven.apache.org/plugins/maven-XXX-plugin-Y.Z-SNAPSHOT/

Guide to testing staged releases:
http://maven.apache.org/guides/development/guide-testing-releases.html

Vote open for 72 hours.

[ ] +1
[ ] +0
[ ] -1

+-----+

 Once a vote is successful, post the result to the dev list and cc the pmc.

 [[5]] Copy from the staging repo to the production repo

 Once the release is deemed fit for public consumption it can be transfered to a production repository where it will
 be available to all users.

 <<Note:>> For now the stage plugin hasn't been released yet and you need to build it yourself.
 The tests for the stage plugin requires that an scp server is present on your local machine. If you are trying to build
 the plugin on Windows you need to exlude the tests. You do this by adding <<<-Dmaven.test.skip=true>>> on the command
 line when you build it.

 Here is an example on how to use the stage plugin:

+-----+
mvn stage:copy -Dsource="http://people.apache.org/~carlos/staging-repo" \
               -Dtarget="scp://people.apache.org/www/people.apache.org/repo/m2-ibiblio-rsync-repository" \
               -Dversion=2.3 \
               -DtargetRepositoryId=apache.releases
+-----+

 <<Note:>> The <<<version>>> parameter is currently ignored and the <<entire>>
 staging repository is synced, not just the given version or the current
 project. It still needs to be provided, though.

 <<Releasing a Project Directly into a Production Repository>>

 If you want to release directly to a production repository then you simply configure the staging repository point at
 the production repository by using the following in your <<<$HOME/.m2/settings.xml>>>:

+-----+
<settings>
  ...
  <profiles>
    <profile>
      <id>release</id>
      <properties>
        <gpg.passphrase>secretPhrase</gpg.passphrase>
        <deploy.altRepository>apache.releases::default::scp://people.apache.org/www/people.apache.org/repo/m2-ibiblio-rsync-repository</deploy.altRepository>
      </properties>
    </profile>
  </profiles>
  ...
</settings>
+-----+

 This will allow you to bypass the staging phase and push the release directly into a production repository. It is assume that
 you have pushed a snapshot somewhere that people have looked at and approved of.

 [[6]] Deploy the current and versioned websites

 <<Note:>> Be sure to generate and deploy the site using the same version of the release. Typically, you need to check out the tag (or go to <<<target/checkout>>>)

+-----+
mvn site-deploy -Preporting

mvn site:stage-deploy -Preporting
+-----+

 [[7]] Review Website

 Wait for the files to arrive at

+-----+
http://maven.apache.org/plugins/maven-XXX-plugin
+-----+

 [[8]] Update the plugins page

 If this is a plugin release, update the version number for the plugin on the
 </plugins/index.html> page.

 [[9]] Update JIRA

 Go to Admin section in JIRA for the <<<maven-XXX-plugin>>> project and mark
 the <<<2.1>>> version as released. Create version 2.2, if that hasn't already
 been done.

 [[10]] Create an Announcement. For instance:

+-----+
From: YOUR_APACHE_EMAIL
To: announce@maven.apache.org, users@maven.apache.org
Cc: dev@maven.apache.org
Subject: [ANN] Maven XXX Plugin Y.Y for Maven 2 Released

The Maven team is pleased to announce the release of the Maven XXX Plugin, version Y.Y

http://maven.apache.org/plugins/maven-XXX-plugin/

You can run mvn -up to get the latest version of the plugin, or specify
the version in your project's plugin configuration:

<plugin>
 <groupId>org.apache.maven.plugins</groupId>
 <artifactId>maven-XXX-plugin</artifactId>
 <version>Y.Y</version>
</plugin>

Release Notes - Maven 2.x XXX Plugin - Version Y.Y

(Copy Here Release Notes in Text Format from Jira)

Enjoy,

-The Maven team

+-----+

 [[11]] Add the release to the next board report, in the private subversion area.

 [[12]] Add the release to the wiki, under the <Recent Releases> section of the
 front page and on the <Releases> page.

 [[13]] Celebrate :o)

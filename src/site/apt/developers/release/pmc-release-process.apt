 ------
 Developers centre - PMC Release Process
 ------
 Vincent Siveton
 ------
 October 2006
 ------

~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/guides/mini/guide-apt-format.html

Introduction

 This document gives step-by-step instructions for releasing a part of Maven. The primary audience is Maven PMC.

Prerequisite

 Be sure that:

 * you have all Maven servers defined in your settings.xml. For more information, please refer to
 {{{../committer-settings.html}Committer settings}}.

 * you have created your GPG keys. For more information, please refer to {{{pmc-gpg-keys.html}Making GPG Keys}}.

Release Process for Part Of Maven

 [[1]] Prepare your poms for release:

   [[a]] Make sure there are <<NO>> snapshots in the poms to be released.

   [[b]] Check that your poms will not loose content when they are rewritten
         during the release process.

     * <<<mvn release:prepare -DdryRun=true>>>

     * Diff the original file <<<pom.xml>>> with the one called
       <<<pom.xml.tag>>> to see if the license or any other info has been
       removed. This has been known to happen if the starting
       <<<\<project\>>>> tag is <<not>> on a single line.

       The only things that should be different between these files are the
       <<<\<version\>>>> and <<<\<scm\>>>> elements. Any other changes, you
       must backport yourself to the original <<<pom.xml>>> file and commit
       before proceeding with the release.

     * Remember to do '<<<mvn release:clean>>>' before you start the real
       release process.

 [[2]] Publish a snapshot:

+-----+
>mvn deploy
...
[INFO] [deploy:deploy]
[INFO] Retrieving previous build number from apache.snapshots
...
+-----+

 <<Note>>: You could verify the deployment under Maven Snapshot repository on Apache.

+-----+
http://people.apache.org/repo/m2-snapshot-repository/org/apache/maven/plugins/maven-XXX-plugin/2.1/
+-----+

 [[3]] Propose a vote on the dev list with the closed issues, the issues left and the staging site. For instance:

+-----+
To: "Maven Developers List" <dev@maven.apache.org>
Subject: [VOTE] Release Maven XXX plugin version 2.1

Hi,

We solved N issues:
http://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=XXX&styleName=Html&version=XXX

There are still a couple of issues left in JIRA:
http://jira.codehaus.org/secure/IssueNavigator.jspa?reset=true&pid=XXX&status=1

Staging site:
http://people.apache.org/~YOUR_APACHE_USERNAME/maven-XXX-plugin/

Vote open for 72 hours, based on:
maven-XXX-plugin-2.1-20061005.000031-3.jar  (rev 453071)

[ ] +1
[ ] +0
[ ] -1

+-----+

 Once a vote is successful, post the result to the dev list.

 [[4]] Prepare the release

+-----+
>mvn release:prepare \
  -Dtag=maven-XXX-plugin-2.1 \
  -B \
  -DtagBase=https://svn.apache.org/repos/asf/maven/plugins/tags \
  -Dusername=YOUR_APACHE_USERNAME
...
+-----+

 <<Note>>: a release.properties file should be generated with release configuration. DO NOT DELETE IT before release.

 [[5]] Perform the release.

 It should deploy several JARS (maven-XXX-plugin-2.1.jar, maven-XXX-plugin-2.1-javadoc.jar
 and maven-XXX-plugin-2.1-sources.jar), maven-XXX-plugin-2.1.pom and their associated md5 and sha1 files.

+-----+
>mvn release:perform
...
+-----+

 <<Note>>: Maven could stop after <<<[INFO] [deploy:deploy]>>>. You need to review your authentification settings
 for Apache (SSH public/private keys) or your servers in the settings.xml. You could try also the following
 (NOT recommended) :

+-----+
>cd target/checkout
>mvn deploy site-deploy --no-plugin-updates -DperformRelease=true
+-----+

 <<Note>>: You could verify the deployment under Maven Rsync repository on Apache.

+-----+
http://people.apache.org/repo/m2-ibiblio-rsync-repository/org/apache/maven/plugins/maven-XXX-plugin/2.1/
+-----+

 [[6]] Sign Releases

 Signatures for all varieties of release need to be created. The signature files should be named after the original
 with the .asc suffix.

+-----+
>cd target/checkout/target
>gpg --armor --output maven-XXX-plugin-2.1-javadoc.jar.asc --detach-sig \
    maven-XXX-plugin-2.1-javadoc.jar
You need a passphrase to unlock the secret key for user: "Vincent Siveton <vsiveton@apache.org>"
1024-bit DSA key, ID XXXXXXXX, created 2006-10-09
>gpg --armor --output maven-XXX-plugin-2.1.jar.asc --detach-sig \
    maven-XXX-plugin-2.1.jar
...
>gpg --armor --output maven-XXX-plugin-2.1-sources.jar.asc --detach-sig \
    maven-XXX-plugin-2.1-sources.jar
...
+-----+

 <<Note>>: You could also sign all required files with the following scripts:

+-----+
# Unix OS
>cd target/checkout/target
>for i in *.jar; do gpg --output $i.asc --detach-sig --armor $i; done
+-----+
+-----+
# Windows OS
>cd target/checkout/target
>for %i in (*.jar) do gpg --output %i.asc --detach-sig --armor %i
+-----+

 <<Note>>: You could verify the signatures with the following

+-----+
>gpg --verify maven-javadoc-plugin-2.1.jar.asc maven-javadoc-plugin-2.1.jar
gpg: Signature made 10/09/06 11:22:35 using DSA key ID XXXXXXXX
gpg: Good signature from "Vincent Siveton <vsiveton@apache.org>"
+-----+

 [[7]] Upload Sign Releases

 Upload the detached signature files (.asc) for these releases to m2-ibiblio-rsync-repository directory on
 Apache, i.e.:

+-----+
/www/people.apache.org/repo/m2-ibiblio-rsync-repository/org/apache/maven/plugins/maven-XXX-plugin/2.1/
+-----+

 [[8]] Review Website

 Wait for the files to arrive at

+-----+
http://maven.apache.org/plugins/maven-XXX-plugin
+-----+

 [[9]] Update the plugins page

 If this is a plugin release, update the version number for the plugin on the
 </plugins/index.html> page.

 [[10]] Update JIRA

 Go to Admin section in JIRA for the <<<maven-XXX-plugin>>> project and mark
 the <<<2.1>>> version as released. Create version 2.2, if that hasn't already
 been done.

 [[11]] Create an Announcement. For instance:

+-----+
From: YOUR_APACHE_EMAIL
To: announce@maven.apache.org, users@maven.apache.org
Cc: dev@maven.apache.org
Subject: [ANN] Maven XXX Plugin Y.Y for Maven 2 Released

The Maven team is pleased to announce the release of the Maven XXX Plugin, version Y.Y

http://maven.apache.org/plugins/maven-XXX-plugin/

You can run mvn -up to get the latest version of the plugin, or specify
the version in your project's plugin configuration:

<plugin>
 <groupId>org.apache.maven.plugins</groupId>
 <artifactId>maven-XXX-plugin</artifactId>
 <version>Y.Y</version>
</plugin>

Release Notes - Maven 2.x XXX Plugin - Version Y.Y

(Copy Here Release Notes in Text Format from Jira)

Enjoy,

-The Maven team

+-----+

 [[12]] Add the release to the next board report, in the private subversion area.

 [[13]] Add the release to the wiki, under the <Recent Releases> section of the
 front page and on the <Releases> page.

 [[14]] Celebrate :o)

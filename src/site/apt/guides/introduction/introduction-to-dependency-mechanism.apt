 ------
 Introduction to the Dependency Mechanism
 ------
 Brett Porter
 Trygve Laugstol
 ------
 12 October 2005
 ------

Introduction to the Dependency Mechanism

  Dependency management is one of the features of Maven that is best known to users and is one of the areas where Maven
  excels. There is not much difficulty in managing dependencies for a single a project, but when you start getting into
  dealing with multi-module projects and applications that consist of tens or hundreds of modules this is where Maven can
  help you a great deal in maintaining a high degree of control and stability.

  Learn more about:

 * Transitive Dependencies

 * Dependency Scope

 * Dependency Management

 []

 <<NOTE:>> <This document is currently in the process of being written, so not all facets are covered.>

* Transitive Dependencies">

 Transitive dependencies are a new feature in Maven 2.0. This allows you to avoid needing to discover and
 specify the libraries that your own dependencies require, and including them automatically.

 This feature is facilitated by reading the project files of your dependencies from the remote repositories
 specified. In general, all dependencies of those projects are used in your project, as are any that the
 project inherits from its parents, or from its dependencies, and so on.

 There is no limit to the number of levels that dependencies can be gathered from, and will only cause a
 problem if a cyclic dependency is discovered.

 With transitive dependencies, the graph of included libraries can quickly grow quite large. For this reason,
 there are some additional features that will limit which dependencies are included:

 * <Dependency mediation>
   - this determines what version of a dependency will be used when multiple
     versions of an artifact are encountered. Currently, Maven 2.0 only supports using the "nearest definition" - so
     you can always guarantee a version by declaring it explicitly in your project's POM.

 * <Dependency scope>
   - this allows you to only include dependencies appropriate for the current stage
     of the build. This is described in more detail below.

 []

* Dependency Scope

 Dependency scope is used to limit the transitivity of a depedency, and also to affect the classpath used for
 various build tasks.

 There are 5 scopes available:

 * <<compile>>
   - this is the default scope, used if none is specified. Compile dependencies are available
     in all classpaths.

 * <<provided>>
   - this is much like compile, but indicates you expect the JDK or a container to provide it.
     It is only available on the compilation classpath, and is not transitive.

 * <<runtime>>
   - this scope indicates that the dependency is not required for compilation, but is for
     execution. It is in the runtime and test classpaths, but not the compile classpath.

 * <<test>>
   - this scope indicates that the dependency is not required for normal use of the application, and
     is only available for the test compilation and execution phases.

 * <<system>>
   - this scope is similar to provided except that you have to provide the JAR
     which contains it explicitly. The artifact is always available and is not
     looked up in a repository.

 []

 Each of the scopes affects transitive dependencies in different ways, as is demonstrated in the table below.
 If a dependency is set to the scope in the left column, dependencies with the scope across the top row will
 result in a dependency in the main project with the scope listed at the intersection. If no scope is listed,
 it means the dependency will be omitted.

*----------+------------+----------+----------+------+
|          | compile    | provided | runtime  | test
*----------+------------+----------+----------+------+
| compile  | compile(*) |    -     | runtime  |  -
*----------+------------+----------+----------+------+
| provided | provided   | provided | provided |  -
*----------+------------+----------+----------+------+
| runtime  | runtime    |    -     | runtime  |  _
*----------+------------+----------+----------+------+
| test     | test       |    -     | test     |  -
*----------+------------+----------+----------+------+

 <<(*) Note:>>
 it is intended that this should be runtime instead, so that all compile dependencies must
 be explicitly listed - however, there is the case where the library you depend on extends a class from another
 library, forcing you to have available at compile time. For this reason, compile time dependencies remain
 as compile scope even when they are transitive.

* Dependency Management

 The dependency management section is a mechanism for centralizing dependency information. When you have
 a set of projects that inherits a common parent it's possible to put all information about the dependency
 in the common POM and have simpler references to the artifacts in the child POMs. The mechanism is best
 illustrated through some examples. Given these two POMs which extend the same parent:

 Project A:

+----+

<project>
  ...
  <dependencies>
    <dependency>
      <groupId>group-a</groupId>
      <artifactId>artifact-a</artifactId>
      <version>1.0</version>
      <exclusions>
        <exclusion>
          <groupId>group-c</groupId>
          <artifactId>excluded-artifact</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>group-a</groupId>
      <artifactId>artifact-b</artifactId>
      <version>1.0</version>
      <type>bar</type>
      <scope>runtime</scope>
    </dependency>
  </dependencies>
</project>

+----+

 Project B:

+----+

<project>
  ...
  <dependencies>
    <dependency>
      <groupId>group-c</groupId>
      <artifactId>artifact-b</artifactId>
      <version>1.0</version>
      <type>war</type>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>group-a</groupId>
      <artifactId>artifact-b</artifactId>
      <version>1.0</version>
      <type>bar</type>
      <scope>runtime</scope>
    </dependency>
  </dependencies>
</project>

+----+

 These two example POMs share a common dependency and each has one non-trivial dependency. This information
 can be put in the parent POM like this:

+----+

<project>
  ...
  <dependencyManagement>
    <dependencies>
      <dependency>
          <groupId>group-a</groupId>
        <artifactId>artifact-a</artifactId>
        <version>1.0</version>
      <exclusions>
          <exclusion>
            <groupId>group-c</groupId>
            <artifactId>excluded-artifact</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>group-c</groupId>
        <artifactId>artifact-b</artifactId>
        <version>1.0</version>
        <type>war</type>
        <scope>runtime</scope>
      </dependency>
      <dependency>
        <groupId>group-a</groupId>
        <artifactId>artifact-b</artifactId>
        <version>1.0</version>
        <type>bar</type>
        <scope>runtime</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
</project>

+----+

 And then the two child poms would become much simpler:

+----+

<project>
  ...
  <dependencies>
    <dependency>
      <groupId>group-a</groupId>
      <artifactId>artifact-a</artifactId>
    </dependency>
    <dependency>
      <groupId>group-a</groupId>
      <artifactId>artifact-b</artifactId>
    </dependency>
  </dependencies>
</project>

+----+

+----+

<project>
  ...
  <dependencies>
    <dependency>
      <groupId>group-c</groupId>
      <artifactId>artifact-b</artifactId>
    </dependency>
    <dependency>
      <groupId>group-a</groupId>
      <artifactId>artifact-b</artifactId>
    </dependency>
  </dependencies>
</project>

+----+

 The reference information about the dependency management tags is available from the
 {{{maven-model/maven.html#class_DependencyManagement}project descriptor reference}}.                    -----


* System Dependencies

 Dependencies with the scope <system> are always available and are not looked
 up in repository. They are usually used to tell Maven about dependencies which
 are provided by the JDK or the VM. Thus, system dependencies are especially
 useful for resolving dependencies on artifacts which are now provided by the
 JDK, but where available as separate downloads earlier. Typical example are
 the JDBC standard extensions or the Java Authentication and Authorization
 Service (JAAS).

 A simple example would be:

+----+

<project>
  ...
  <dependencies>
    <dependency>
      <groupId>javax.sql</groupId>
      <artifactId>jdbc-stdext</artifactId>
      <version>2.0</version>
      <scope>system</scope>
      <systemPath>${java.home}/lib/rt.jar</systemPath>
    </dependency>
  </dependencies>
  ...
</project>

+----+

 If your artifact is provided by the JDK's <<<tools.jar>>> the system path
 would be defined as follows:

+----+
<project>
  ...
  <dependencies>
    <dependency>
      <groupId>sun.jdk</groupId>
      <artifactId>tools</artifactId>
      <version>1.5.0</version>
      <scope>system</scope>
      <systemPath>${java.home}/../lib/tools.jar</systemPath>
    </dependency>
  </dependencies>
  ...
</project>
+----+


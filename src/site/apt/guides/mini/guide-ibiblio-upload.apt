 ------
 Guide to uploading artifacts to the Central Repository
 ------
 Jason van Zyl
 ------
 12 October 2005
 ------

Guide to uploading artifacts to The Central Repository

 In order for users of Maven to utilize artifacts produced by your project you must deploy them to
 a remote repository. Many open source projects want to allow users of their projects who build with
 Maven to have transparent access to their project's artifacts. In order to allow for this a project
 must have their artifacts deployed to the Central Repository.

* Step 1: Create an upload bundle

 Use the repository plugin provided with the standard Maven distribution to create an upload bundle:

+----+

 mvn repository:bundle-create

+----+

 The bundle will be created in your <<<target>>> directory of the form:
 <<<${pom.artifactId}-${pom.currentVersion}-bundle.jar>>>
 
 If you want to include a jar with java sources in your upload (recommended, unless your license doesn't
 allow sources to be redistributed) the command to run is:

+----+

 mvn source:jar javadoc:jar repository:bundle-create

+----+

 If you are not using maven as your build system but want something
 uploaded to the Central Repository then you just need to make a JAR (using the <<<jar>>> executable,
 not <<<zip>>>, <<<pkzip>>> or equivalent) with the following format:

+----+

pom.xml
foo-1.0.jar (or whatever artifact is referred to in the pom.xml)
foo-1.0-sources.jar (optional, jar containing java sources)
foo-1.0-javadoc.jar (optional, jar containing javadocs)

+----+

 Note that the bundle will be read by a script, so it must follow the above format. Also,
 the <<<pom.xml>>> must at least contain the following elements:

 * modelVersion

 * groupId

 * artifactId

 * packaging

 * name

 * version

 * url

 * licenses

 * scm url

 * description

 * dependencies

 []

 Be sure to always check previous versions of the poms in the repository to use the information
 already there as a base.

 A basic sample:

+----+

<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.apache.maven</groupId>
  <artifactId>maven</artifactId>
  <version>2.0</version>
  <packaging>jar</packaging>
  <name>Maven core</name>
  <url>http://maven.apache.org</url>
  <description>The maven main core project description</description>
  <licenses>
    <license>
      <name>The Apache Software License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>
  <scm>
    <url>http://svn.apache.org/viewcvs.cgi/maven</url>
  </scm>
  <dependencies>
    <dependency>
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
    </dependency>
    ...
  </dependencies>
</project> 

+----+

 []

 <<IMPORTANT>> considerations about the <<groupId>>: it will identify your project uniquely across all
 projects, so we need to enforce a naming schema. For projects with artifacts already uploaded to ibiblio it can
 be equal to the previous used, but for new projects it has to follow the package name rules, what
 means that has to be at least as a domain name you control, and you can create as many subgroups
 as you want.
 There are a lot of poorly defined package names so you <<must provide proof that you control the domain>> that
 matches the groupId. Provide proof means that the project is hosted at that domain or it's owned by a member,
 in that case you must give the link to the registrar database (whois) where the owner is listed and the page
 in the project web where the owner is associated with the project.
 eg. If you use a com.sun.xyz package name we expect that the project is hosted at http://xyz.sun.com.

 Look at {{{http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7}
 More information about package names}}. Check also the guide about
 {{{guide-naming-conventions.html}Maven naming conventions}}

 Examples:

 * www.springframework.org -> org.springframework

 * oness.sf.net -> net.sf.oness

 []

* Step 2: Posting the request

 Post your request to {{{http://jira.codehaus.org/secure/CreateIssue.jspa?pid=10367&amp;issuetype=3}JIRA}}.
 In the description you must write the URL of the upload bundle
 (if you're uploading more than one bundle please add all the urls under the same issue),
 then leave a blank line and provide the following:

 * a url where the project can be found.

 * if you are one of its developers, a url where your name or email can be found inside the project site.
 
 []

 This will speed up the uploading process.

 You can place any additional comments you wish in the following paragraph. So the description field might look like:

+----+

http://wiggle.sourceforge.net/downloads/wiggle-1.0-bundle.jar

http://wiggle.sourceforge.net
http://wiggle.sourceforge.net/team-list.html

Wiggle is a fantastic new piece of software for automating the
clipping of nose hairs. Please upload!

+----+

* Explanation

 Some folks have asked why do we require the POM and license each time an artifact is deployed so here's a small explanation. The POM
 being deployed with the artifact is part of the process to make transitive dependencies a reality in Maven. The logic for getting
 transitive dependencies working is really not that hard, the problem is getting the data. The other applications
 that may be possible having all the POMs available for artifacts are vast, so by placing them into the repository as part of the
 process we open up the doors to new ideas that involve unified
 access to project POMs.

 We also ask for a license now because it is possible that your project's license may change in the course of
 its life time and we are trying create tools to help normal people sort out licensing issues. For example, knowing all the licenses
 for a particular graph of artifacts we could have some strategies that would identify potential licensing problems.

* Maven partners

 The following sites sync automatically their project repository with the central one.
 If you want a project from any of this sites to be uploaded to ibiblio you'll have to
 contact the project maintainers.

 * {{{http://www.apache.org/dev/release-publishing.html#maven-repo}The Apache Software Foundation}}

 * {{{http://docs.codehaus.org/display/HAUSMATES/Maven+Guide}Codehaus}}

 * {{{http://jetty.mortbay.org}MortBay Jetty}}

 * {{{http://www.opensymphony.com/}OpenSymphony}}

 * {{{http://www.osjava.org}OS Java}}


Sync'ing your own repository with ibiblio

 If you want to sync automatically your own repository to ibiblio you must make sure the server has rsync or rsync over ssh
 and provide a script like the
 {{{http://svn.apache.org/viewvc/maven/archiva/trunk/maven-meeper/src/bin/synchronize/m2-sync/conf/}current scripts}},
 open an issue under {{{http://jira.codehaus.org/browse/MAVENUPLOAD}MAVENUPLOAD}} with it and we'll add it to the automatically synced repos.
 If using ssh you need to add the {{{http://www.ibiblio.org/maven/id_dsa.pub}maven public key}} to the authorized ones to allow us to log in the machine.

 <<Important>>: nothing is deleted or changed in ibiblio after it is synced (except maven-metadata.xml files)


For Maven developers


 The scripts to make the upload to the repository are in the <<<components>>> tree of svn, inside <<<maven-meeper/src/bin>>>

 That sources are checked out in beaver.codehaus.org <<</home/projects/maven/components/maven-meeper/src/bin>>>, so
 after logging in beaver as maven user you can go there and run

+----+
./deploy-bundle [URL of the bundle]
+----+

  That command will download the bundle, decompress and show the pom. You have to make sure everything is right
  and hit <<<q>>>, when a summary with groupId, artifactId and version will be shown, and a message saying if the
  group already exists or not. This is useful as we have to be careful creating new groups, making sure they follow
  the conventions and that they don't exist already with another name. If the pom is not right or there's any doubt
  upload must be aborted with Ctrl-C, and a comment posted in the upload request. If there's no response from
  the reporter in a month the request will be closed as incomplete.

  Things to remember:

  * all the dependencies have to be already in the repo

  * if there are no dependencies it's suspicious and must be asked if it's right in an issue comment

  * parent poms have to be already in the repo

  * all the minimal information previously mentioned has to be in the pom

  * poms must include at least as much information as previous versions, and shouldn't change too much the dependencies

  * while chceking previous version chcek also if it was relocated. If so ask the reporter to update the bundle with the
    new information

  * groupIds have to follow previously stated naming conventions

  * upload requests for popular projects require being extremely careful (javax.* groups, spring, hibernate,...)


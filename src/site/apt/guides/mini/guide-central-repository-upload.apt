 ------
 Guide to uploading artifacts to the Central Repository
 ------
 Jason van Zyl
 ------
 12 October 2005
 ------

Guide to uploading artifacts to the Central Repository

 In order for users of Maven to utilize artifacts produced by your project you must deploy them to
 a remote repository. Many open source projects want to allow users of their projects who build with
 Maven to have transparent access to their project's artifacts. In order to allow for this a project
 must have their artifacts deployed to the Central Repository.


Requirements

 Only releases can be uploaded to the central repository, that means files that won't change and that only depend in other files
 already released and available in the repository.

 There are some requirements about the minimal information in the poms that are in the central repository. At least these must be present

 * modelVersion

 * groupId

 * artifactId

 * packaging

 * name

 * version

 * url

 * licenses

 * scm url

 * description

 * dependencies

 []

 <<groupId>>: it will identify your project uniquely across all
 projects, so we need to enforce a naming schema. For projects with artifacts already uploaded to the Central Repository it can
 be equal to the one used previously, but for new projects it has to follow the package name rules, what
 means that has to be at least as a domain name you control, and you can create as many subgroups
 as you want.
 There are a lot of poorly defined package names so you <<must provide proof that you control the domain>> that
 matches the groupId. Provide proof means that the project is hosted at that domain or it's owned by a member,
 in that case you must give the link to the registrar database (whois) where the owner is listed and the page
 in the project web where the owner is associated with the project.
 eg. If you use a com.sun.xyz package name we expect that the project is hosted at http://xyz.sun.com.

 Look at {{{http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7}
 More information about package names}}. Check also the guide about
 {{{guide-naming-conventions.html}Maven naming conventions}}.

 Examples:

 * www.springframework.org -> org.springframework

 * oness.sf.net -> net.sf.oness

 []

* Explanation

 Some folks have asked why do we require all this information in the POM for deployed artifacts so here's a small explanation. The POM
 being deployed with the artifact is part of the process to make transitive dependencies a reality in Maven. The logic for getting
 transitive dependencies working is really not that hard, the problem is getting the data. The other applications
 that are made possible by having all the POMs available for artifacts are vast, so by placing them into the repository as part of the
 process we open up the doors to new ideas that involve unified access to project POMs.

 We also ask for license now because it is possible that your project's license may change in the course of
 its life time and we are trying create tools to help normal people sort out licensing issues. For example, knowing all the licenses
 for a particular graph of artifacts we could have some strategies that would identify potential licensing problems.

* A basic sample:

+----+

<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.apache.maven</groupId>
  <artifactId>maven</artifactId>
  <version>2.0</version>
  <packaging>jar</packaging>
  <name>Maven core</name>
  <url>http://maven.apache.org</url>
  <description>The maven main core project description</description>
  <licenses>
    <license>
      <name>The Apache Software License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>
  <scm>
    <url>http://svn.apache.org/viewcvs.cgi/maven</url>
  </scm>
  <dependencies>
    <dependency>
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
    </dependency>
    ...
  </dependencies>
  <!--
  NOT ALLOWED: (see FAQ)
  <repositories></repositories>
  <pluginRepositories></pluginRepositories>
  -->
</project>

+----+


FAQ and common mistakes

 * I have other repositories or pluginRepositories listed in my pom, is that a problem?

 Yes, the central repo must be self contained, which means that all your dependencies must be already in the central repository.
 You need to remove the repositories and pluginRepositories entries and make sure your project still builds when your local repository cache is empty.

 The only exception allowed is when a dependency can not be distributed from the central repository due to the license, in that case only the pom for that
 dependency is required, listing where the dependency can be downloaded.
 {{{http://repo1.maven.org/maven2/javax/activation/activation/1.0.2/activation-1.0.2.pom}See an example}}.

 * I have a patched version of the foo project developed at foo.com, what groupId should I use?

 When you patch / modify a third party project, that patched version becomes your project and therefore should be distributed under a groupId you control
 as any project you would have developed, never under com.foo. See above considerations about groupId.

 * My project is hosted at a project hosting service like SourceForge or dev.java.net, what should I use as groupId?

 If your project name is <<<foo>>> at SourceForge, then <<<net.sf.foo>>>. If it's foo at dev.java.net, then <<<net.java.dev.foo>>>

 []

Sync'ing your own repository to the central repository automatically

 This is the preferred process. You first have to setup your project to
 {{{http://maven.apache.org/plugins/maven-deploy-plugin/}deploy to a remote repository}}.

 You must make sure the remote repository server has rsync or rsync over ssh, there are free services like
 {{{http://sf.net/}Sourceforge}} that provide you {{{http://sourceforge.net/docman/display_doc.php?docid=4297&group_id=1#shell}ssh server access}}.

 After you are able to deploy to your remote repository <<make sure you only deploy releases>>. Then you can provide a script like the
 {{{http://svn.apache.org/viewvc/maven/archiva/tools/trunk/maven-meeper/src/bin/synchronize/m2-sync/conf/}current scripts}},
 open an issue under {{{http://jira.codehaus.org/browse/MAVENUPLOAD}MAVENUPLOAD}} and attach the script, and we'll add it to the automatically synced repos.

 Make sure you <<provide proof of owning the domain>> that matches the groupId (see groupId considerations above). Proof means either the server to sync from has a name
 under that domain, your name shows up in a prominent place in the domain, or you provide a link to a whois database where your name shows up as the domain owner.

 If you are using ssh in your own server you need to add the {{{http://www.ibiblio.org/maven/id_dsa.pub}maven public key}} to the authorized ones to allow us to log
 in the machine.

 Remember to subscribe to {{{mailto:repo-maintainers-subscribe@maven.apache.org}repository mailing list}}.

 <<Important>>: nothing is deleted or changed in the Central Repository after it is synced (except maven-metadata.xml files)


Sync FAQ

 * Can I provide a sync for a groupId of a third party project?

 If the third party project is not willing to provide a repository to sync from, and you are a regular user of maven and the third party project, the answer is yes,
 you can set up a repository as if the project were yours (see instructions above). Please create a {{{http://jira.codehaus.org/browse/MAVENUPLOAD}MAVENUPLOAD}} Jira
 issue first describing what and why you are trying to do it, and you may be designated the "unofficial" mantainer of the repository section associated to that project,
 and you will be responsible of publishing the new releases for that project in your repository if other users request it. You can opt out at any time.

 []

Manual upload of artifacts

 Note that this manual process is time consuming and <<will only be accepted for a limited number of requests>>. If you want to upload frequently read the
 section above about automatic sync.

 <<Estimated process time is FOUR WEEKS>>. If you want to use the manual process, that is the estimated time to process <<if no problems are detected>>.
 It means that for each version you release and want to upload to the central repository you will have to wait that time. If a problem is detected it will
 be notified in the Jira issue and <<you will wait again>> until the next time the issues are processed.

* Step 1: Create an upload bundle

 Use the repository plugin provided with the standard Maven distribution to create an upload bundle:

+----+

 mvn repository:bundle-create

+----+

 The bundle will be created in your <<<target>>> directory with the name:
 <<<${pom.artifactId}-${pom.currentVersion}-bundle.jar>>>

 If you want to include a jar with java sources in your upload (recommended, unless your license doesn't
 allow sources to be redistributed) the command to run is:

 <<Note>> due to a bug in repository:bundle-create you will need to <<manually add the javadoc jar>> to the bundle jar, using zip or any other compression program.

+----+

 mvn source:jar javadoc:jar repository:bundle-create

+----+

 If you are not using maven as your build system but want something
 uploaded to the Central Repository then you just need to make a JAR (using the <<<jar>>> executable,
 not <<<zip>>>, <<<pkzip>>> or equivalent) with the following content:

+----+

pom.xml
foo-1.0.jar (or whatever artifact is referred to in the pom.xml)
foo-1.0-sources.jar (optional, jar containing java sources)
foo-1.0-javadoc.jar (optional, jar containing javadocs)

+----+

 Note that the bundle will be read by a script, so it must follow the above format.

 []

 Be sure to always check previous versions of the poms in the repository to use the information
 already there as a base.

 []

* Step 2: Posting the request

 Post your request to {{{http://jira.codehaus.org/secure/CreateIssue.jspa?pid=10367&amp;issuetype=3}JIRA}}.
 Under this URL, you need to choose that the project is "maven-upload-requests" and issue type is "wish".
 In the description, you must write the URL of the upload bundle
 (if you're uploading more than one bundle please add all the urls under the same issue),
 then leave a blank line and provide the following:

 * a url where the project can be found.

 * if you are one of its developers, a url where your name or email can be found inside the project site.

 []

 This will speed up the uploading process.

 You can place any additional comments you wish in the following paragraph. So the description field might look like:

+----+

http://wiggle.sourceforge.net/downloads/wiggle-1.0-bundle.jar

http://wiggle.sourceforge.net
http://wiggle.sourceforge.net/team-list.html

I'm a developer in wiggle, please upload!

+----+

 or

+----+

http://wiggle.sourceforge.net/downloads/wiggle-1.0-bundle.jar

http://wiggle.sourceforge.net
http://wiggle.sourceforge.net/team-list.html

I'm a developer in wiggle, and want to use the org.wiggle groupId
I own wiggle.org domain, you can see my name in http://reports.internic.net/cgi/whois?whois_nic=wiggle.org&type=domain
or you can see the project web page in www.wiggle.org

+----+

Manual process FAQ and common mistakes

 * I use parent poms how do I include them in the bundle?

 You can't. You need to use the automated synchronization process noted above.

 * I want to get several bundles uploaded, do I need to create a Jira issue for each?

 No, please ignore the bundle url field and put in only one Jira issue the URLs of all bundles in the description or comments fields.

 []

Maven partners

 The following sites sync automatically their project repository with the central one.
 If you want a project from any of these sites to be uploaded to the Central Repository you'll have to
 contact the project maintainers.

 * {{{http://www.apache.org/dev/release-publishing.html#maven-repo}The Apache Software Foundation}}

 * {{{http://docs.codehaus.org/display/HAUSMATES/Maven+Guide}Codehaus}}

 * {{{http://jetty.mortbay.com}MortBay Jetty}}

 * {{{http://www.opensymphony.com/}OpenSymphony}}

 []

For Maven developers


 The scripts to make the upload to the repository are in the <<<components>>> tree of svn, inside <<<maven-meeper/src/bin>>>

 Those scripts are checked out in www.maven.org <<</home/maven/bin>>>, so
 after logging as maven user you can go to the bundle-upload and run

+----+
./deploy-bundle bundle_URL [groupId] [version]
+----+

  That command will download the bundle, decompress and show the pom. You have to make sure everything is right
  and hit <<<q>>>, when a summary with groupId, artifactId and version will be shown, and a message saying if the
  group already exists or not. This is useful as we have to be careful creating new groups, making sure they follow
  the conventions and that they don't exist already with another name. If the pom is not right or there's any doubt
  upload must be aborted with Ctrl-C, and a comment posted in the upload request. If there's no response from
  the reporter in a month the request will be closed as incomplete.

  If groupId and version are not specified in the command line the script will try to get the values from the pom.
  It won't work if the pom extends another pom and the tags are not in the bundle pom.

  Things to remember:

  * all the dependencies have to be already in the repo

  * if there are no dependencies it's suspicious and must be asked if it's right in an issue comment

  * parent poms have to be already in the repo

  * all the minimal information previously mentioned has to be in the pom

  * poms must include at least as much information as previous versions, and shouldn't change too much the dependencies

  * while checking previous version check also if it was relocated. If so ask the reporter to update the bundle with the
    new information

  * groupIds have to follow previously stated naming conventions

  * upload requests for popular projects require being extremely careful (javax.* groups, spring, hibernate,...)

  []

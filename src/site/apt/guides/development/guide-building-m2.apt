 ------
 Guide to Building Maven
 ------
 Brett Porter
 Jason van Zyl
 ------
 12 June 2005
 ------

Building Maven

* Why would I want to build Maven?

  Building Maven yourself is for one of two reasons:

    * to try out a bleeding edge feature or bugfix (issues can be found in
      {{{http://jira.codehaus.org/browse/MNG} JIRA}}),

    * to fix a problem you are having and submit a patch to the developers team.

  Note, that you don't need to bootstrap Maven for day to day use, or to develop plugins. While we encourage getting
  involved and fixing bugs that you find, for day to day use we recommend using the latest release.

* Checking out the sources

  All of the source code for Maven and its related libraries is in {{{http://subversion.tigris.org/} Subversion}}.
  You can {{{http://svn.apache.org/viewvc/maven/} browse the repository}}, or checkout specific modules directly.

  To build Maven 2.0, you need the <<<maven-2.0.x>>> branch of the <<<components>>> module. To check that out, run the command:

-------------------
svn co https://svn.apache.org/repos/asf/maven/components/branches/maven-2.0.x
-------------------

  Alternatively, you can check out all Maven projects in one directory using:

-------------------
svn co https://svn.apache.org/repos/asf/maven/trunks maven
-------------------

  The <<<maven-2.0.x>>> directory will contain the Maven 2.0 source code, and
  the <<<maven-components>>> directory will contain the 2.1 source code. Note
  that neither directory contains any of the plugins.

  Other modules you might be interested in related to Maven development are:

    * <<<plugins/trunk>>> - The sources of the Maven plugins. These can be individually installed, or built together.

    * <<<site/trunk>>> - The Maven website.

    * <<<wagon/trunk>>> - Maven Wagon, used by the artifact code and others for providing the transport layer to
      get and put artifacts in a repository.

    * <<<scm/trunk>>> - Maven SCM, a generic API to communicate with various different SCM providers, used by
      Continuum and the release and SCM plugins.

    * <<<doxia/trunk>>> - The Doxia site generation library.

    * <<<surefire/trunk>>> - The Surefire test runner.

    * {{{http://svn.plexus.codehaus.org/plexus/} Plexus}} - the IoC container used by Maven.

  If you're looking at {{{http://svn.apache.org/viewvc/maven/trunks/}ViewVC}}
  there is seemingly nothing there. We use {{{http://svnbook.red-bean.com/en/1.0/ch07s03.html}externals definitions}}
  to link together all the trunks into one logical location for convenience. If you want to see what is being 
  linked into one logical location you can use the following command:

-------------------
svn propget svn:externals
-------------------

* Building Maven 2.0 with Maven installed

  If you already have Maven installed, it can be faster to build a new version with Maven, rather than a clean bootstrap.

  To do this, run from the <<<maven-2.0.x>>> directory:

----
mvn install
----

  This will build, test and install all libraries in the local repository. Next, if you want to produce the binary distribution:

----
cd maven-core
mvn assembly:assembly
----

  The assemblies will be created in <<<target>>> and can be unzipped to the location where you'd like Maven installed.

* Building Maven 2.0 without Maven installed

  Once you have checked out the code, change into the <<<maven-2.0.x>>> directory that was created.
  You may want to setup a different environment to install Maven to, other than your normal installation of a
  release, so set the <<<M2_HOME>>> environment variable accordingly, e.g.:

----
export M2_HOME=/usr/local/maven-2.0.5-SNAPSHOT
PATH=$M2_HOME/bin:$PATH
----

  or

----
set M2_HOME=c:\maven-2.0.5-SNAPSHOT
set PATH=%M2_HOME%\bin;%PATH%
----

  From this, run the <<<bootstrap>>> command for your system:

----
sh bootstrap.sh
----

  or

----
bootstrap.bat
----

  First, the code will be built, and a Maven installation created. If you have checked out all the trunks so that the plugins
  exist in <<<../plugins>>>, the plugins will also be rebuilt and installed in the local repository.
  Finally, a set of integration tests will run.

  Note that it isn't necessary to have a previous version (alpha-X...) of maven 2 installed before bootstrap.

  If you have any problems or get any failures during the run, please report them to the
  {{{/mail-lists.html} Maven Developers List}}.

* Building Maven 2.1

  TODO

